% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create_output_subscribers.R
\name{create_output_subscribers}
\alias{create_output_subscribers}
\title{Create a subscribable stream to a function output}
\usage{
create_output_subscribers(
  source_fn,
  filter_fn = function(...) TRUE,
  delay = 0.1,
  callbacks = shiny:::Callbacks$new()
)
}
\arguments{
\item{source_fn}{A zero-argument function who's return value is to be
subscribed to.}

\item{filter_fn}{Optional function returning boolean that can be used to skip
invoking all the subscribed functions on a given loop.}

\item{delay}{How frequently to poll \code{source_fn}.}

\item{callbacks}{\code{Shiny:::Callbacks} R6 class containing all subscriptions.
Created automatically if not supplied.}
}
\value{
A list with two callbacks attached: \verb{$subscribe()} which will add a
new callback to the subscription queue that takes as its input the output
of \code{source_fn()}; and \verb{$cleanup} which is used to stop listening to the
output of \code{source_fn()}.
}
\description{
Create a subscribable stream to a function output
}
\examples{

clock <- shinyuieditor:::create_output_subscribers(
  source_fn = Sys.time,
  delay = 1
)

tic_tok <- clock$subscribe(
  function(t) {
    cat(
      if (as.integer(t) \%\% 2 == 0) "Tic" else "Tok",
      "\n"
    )
  }
)
popcorn <- clock$subscribe(
  function(t) {
    cat(paste("At the tone the time is", t, "\n"))
  }
)

# unsubscribe to just popcorn
popcorn()

# stop listening entirely
clock$cancel_all()

}
