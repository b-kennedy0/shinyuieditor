import type { ArgTypes, ArgTypesMap, KnownArgTypes } from "../ArgumentInfo";

/**
 * Due to dynamics of types the on change callback is a very general purpose
 * function that can take any of our input types as arguments. Type narrowing is
 * not really beneficial here since we already know the type and the callback is
 * generated by the code not provided by the user.
 */
export type OnChangeCallback = (newValue?: KnownArgTypes) => void;

type SettingsInputElementPropsByType = {
  [T in ArgTypes]: {
    id: string;
    type: T;
    value: ArgTypesMap[T];
    onChange: OnChangeCallback;
  };
};

export type SettingsInputElementProps =
  SettingsInputElementPropsByType[ArgTypes];

export function SettingsInputElement({
  type,
  id,
  value,
  onChange,
}: SettingsInputElementProps) {
  if (type === "string") {
    return (
      <StringInput
        id={id}
        value={value}
        onChange={(newValue) => onChange(newValue)}
      />
    );
  }

  if (type === "number") {
    return (
      <input
        id={id}
        type="number"
        value={value}
        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
          onChange(Number(e.target.value));
        }}
      />
    );
  }

  throw new Error("Dont know how to handle this input type yet");
}

function StringInput({
  id,
  value,
  onChange,
}: Omit<SettingsInputElementPropsByType["string"], "type">) {
  return (
    <input
      id={id}
      type="text"
      value={value}
      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
        const newValue = e.target.value;
        onChange(newValue);
      }}
    />
  );
}
