import { BooleanInputSimple } from "components/Inputs/BooleanInput/BooleanInputSimple";
import { CSSUnitInputSimple } from "components/Inputs/CSSUnitInput/CSSUnitInputSimple";
import { NamedListInputSimple } from "components/Inputs/ListInput/NamedListInputSimple";
import { DropdownSelect } from "components/Inputs/OptionsDropdown/DropdownSelect";
import { RadioInputsSimple } from "components/Inputs/RadioInputs/RadioInputsSimple";
import type { Component } from "TypescriptUtils";

import type {
  FieldEntryUnion,
  InputFieldEntryNames,
  KnownInputFieldTypes,
} from "../inputFieldTypes";

import { NumberInput } from "./NumberInput";
import { StringInput } from "./StringInput";

/**
 * Due to dynamics of types the on change callback is a very general purpose
 * function that can take any of our input types as arguments. Type narrowing is
 * not really beneficial here since we already know the type and the callback is
 * generated by the code not provided by the user.
 */
export type OnChangeCallback = (newValue: KnownInputFieldTypes) => void;

export type SettingsInputElementProps = FieldEntryUnion & {
  id: string;
  onChange: OnChangeCallback;
};

const inputComps: Record<InputFieldEntryNames, Component> = {
  string: StringInput,
  number: NumberInput,
  cssMeasure: CSSUnitInputSimple,
  boolean: BooleanInputSimple,
  list: NamedListInputSimple,
  dropdown: DropdownSelect,
  radio: RadioInputsSimple,
};

export function SettingsInputElement(args: SettingsInputElementProps) {
  if (!(args.inputType in inputComps)) {
    return (
      <div>
        I don't know how to render the input of type {args.inputType} yet!
        Sorry.
      </div>
    );
  }

  if (args.inputType === "string") {
    return <inputComps.string {...args} />;
  }

  if (args.inputType === "number") {
    return <inputComps.number {...args} />;
  }

  if (args.inputType === "cssMeasure") {
    return <inputComps.cssMeasure {...args} />;
  }

  if (args.inputType === "boolean") {
    return <inputComps.boolean {...args} />;
  }

  if (args.inputType === "list") {
    return <inputComps.list {...args} />;
  }

  if (args.inputType === "dropdown") {
    return <inputComps.dropdown {...args} />;
  }

  if (args.inputType === "radio") {
    return <inputComps.radio {...args} />;
  }

  // eslint-disable-next-line no-console
  console.warn(args);
  return (
    <div>
      Not exactly sure how you got here. Invalid settings input arguments
    </div>
  );
}
